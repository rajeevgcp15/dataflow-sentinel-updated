# This sentinel policies enforce encryption at rest utilizing customer managed kms keys
# These sentinel policies enforce Wells Fargo security principles PR-036,PR-037,PR-039

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"

# Resource Types CMEK Param Map
resourceTypesCMEKKeyMap = {
	"google_pubsub_topic": {
		"key":   "kms_key_name",
		"array": null,
	},
	"google_secret_manager_secret": {
		"key":   "customer_managed_encryption.0.kms_key_name",
		"array": "replication.0.user_managed.0.replicas",
	},
	"google_dataproc_cluster": {
		"key":   "cluster_config.0.encryption_config.0.kms_key_name",
		"array": null,
	},
	"google_bigquery_dataset": {
		"key":   "default_encryption_configuration.0.kms_key_name",
		"array": null,
	},
	"google_storage_bucket": {
		"key":   "encryption.0.default_kms_key_name",
		"array": null,
	},
	"google_sql_database_instance": {
		"key":   "encryption_key_name",
		"array": null,
	},
    "google_dataflow_job": {
		"key":   "kms_key_name",
		"array": null,
	},
}

# Function to check if KMS Param is Defined
check_for_kms = func(rc, kms_key_param) {
	message = null
	address = rc["address"]
	unknown_kms_key = plan.evaluate_attribute(rc.change.after_unknown, kms_key_param)
	is_unknown_kms_undefined = rule { types.type_of(unknown_kms_key) is "null" }
	if is_unknown_kms_undefined {
		known_kms_key = plan.evaluate_attribute(rc, kms_key_param)
		is_known_kms_undefined = rule { types.type_of(known_kms_key) is "undefined" }
		if is_known_kms_undefined {
			message = plan.to_string(address) + " does not have " + kms_key_param + " defined"
		} else {
			if types.type_of(known_kms_key) is "null" {
				message = plan.to_string(address) + " does not have " + kms_key_param + " defined"
			}
		}
	}
	return message
}

check_multiple_kms = func(address, rc, kms_key_param, array) {
	kms_key_param_array = []
	# messages = {}
	if types.type_of(array) is "null" {
		append(kms_key_param_array, kms_key_param)
	} else {
		kms_attribs = plan.evaluate_attribute(rc, array)
		count = 0
		for kms_attribs as _ {
			append(kms_key_param_array, array + "." + plan.to_string(count) + "." + kms_key_param)
			count += 1
		}
	}
	err = []
	for kms_key_param_array as kkp {
		msg = check_for_kms(rc, kkp)
		if types.type_of(msg) is not "null" {
			append(err, msg)
		}
	}
	return err
}

# Fetch all resources based on resourceTypes
allResources = {}
for resourceTypesCMEKKeyMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

# print(messages)
msgs = {}
for allResources as address, rc {
	msg = check_multiple_kms(
		address,
		rc,
		resourceTypesCMEKKeyMap[rc["type"]]["key"],
		resourceTypesCMEKKeyMap[rc["type"]]["array"],
	)
	if length(msg) > 0 {
		msgs[address] = msg
	}
}

# Main rule
for msgs as k, v {
	print(k + " =====>" + plan.to_string(v))
}

GCP_RES_CMEK = rule { length(msgs) is 0 }

main = rule { GCP_RES_CMEK }